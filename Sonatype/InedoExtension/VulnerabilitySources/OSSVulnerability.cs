using System;
using System.Collections.Generic;
using System.Linq;
using Inedo.Extensibility.VulnerabilitySources;
using Inedo.Feeds;

namespace Inedo.Extensions.Sonatype.VulnerabilitySources
{
    internal sealed class OSSVulnerability
    {
        public OSSVulnerability(string id, string title, string description, decimal cvsScore, string reference)
        {
            this.Id = id;
            this.Title = title;
            this.Description = description;
            this.CVSScore = cvsScore;
            this.Reference = reference;
        }

        public string Id { get; }
        public string Title { get; }
        public string Description { get; }
        public decimal CVSScore { get; }
        public string Reference { get; }

        private Dictionary<PackageKey, HashSet<string>> PackageVersions { get; } = new Dictionary<PackageKey, HashSet<string>>();

        public void AddPackageVersion(FeedType feedType, string name, string version)
        {
            if (!this.PackageVersions.TryGetValue(new PackageKey(feedType, name), out var versions))
            {
                versions = new HashSet<string>();
                this.PackageVersions.Add(new PackageKey(feedType, name), versions);
            }

            versions.Add(version);
        }
        public IEnumerable<VulnerabilityInfo> GetVulnerabilityInfos()
        {
            return this.PackageVersions
                .Select(p => new Info(this, p.Key.FeedType, p.Key.Name, p.Value));
        }

        private readonly struct PackageKey : IEquatable<PackageKey>
        {
            public PackageKey(FeedType feedType, string name)
            {
                this.FeedType = feedType;
                this.Name = name;
            }

            public FeedType FeedType { get; }
            public string Name { get; }

            public bool Equals(PackageKey other)
            {
                return this.FeedType == other.FeedType
                    && string.Equals(this.Name, other.Name, StringComparison.OrdinalIgnoreCase);
            }
            public override bool Equals(object obj) => obj is PackageKey packageKey ? this.Equals(packageKey) : false;
            public override int GetHashCode() => StringComparer.OrdinalIgnoreCase.GetHashCode(this.Name ?? string.Empty);
            public override string ToString() => this.FeedType + "/" + this.Name;
        }

        private sealed class Info : VulnerabilityInfo
        {
            private static readonly string[] cvssScoreRange = new[]
            {
                "low", // 0
                "low", // 1
                "low", // 2
                "low", // 3
                "medium", // 4
                "medium", // 5
                "medium", // 6
                "high", // 7
                "high", // 8
                "critical", // 9
                "critical", // 10
            };
            private readonly OSSVulnerability v;

            public Info(OSSVulnerability v, FeedType feedType, string packageName, IEnumerable<string> versions)
            {
                this.v = v;
                this.FeedType = feedType;
                this.PackageName = packageName;
                this.PackageVersions = VulnerabilityPackageVersionRange.Multiple(versions.Select(VulnerabilityPackageVersionRange.Single));
            }

            public override string Id => this.v.Id;
            public override FeedType FeedType { get; }
            public override string PackageName { get; }
            public override VulnerabilityPackageVersionRange PackageVersions { get; }
            public override string Title => this.v.Title;
            public override string Description => $"{this.v.Description}\n\nSeverity: {this.v.CVSScore:##.0} ({cvssScoreRange[(int)this.v.CVSScore]})\nMore information: {this.v.Reference}";
            public override decimal? Score => this.v.CVSScore;
        }
    }
}
