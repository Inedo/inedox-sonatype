using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Inedo.Diagnostics;
using Inedo.Documentation;
using Inedo.Extensibility.VulnerabilitySources;
using Inedo.Feeds;
using Inedo.Serialization;
using Newtonsoft.Json;

namespace Inedo.Extensions.Sonatype.VulnerabilitySources
{
    [DisplayName("OSS Index")]
    [Description("Automatically imports vulnerability information from OSS Index, previously known as Vör Security.")]
    [PersistFrom("Inedo.ProGet.Extensions.VorSecurity.VulnerabilitySources.VorSecurityVulnerabilitySource,VorSecurity")]
    public sealed class OSSIndexVulnerabilitySource : VulnerabilitySource
    {
        private static readonly LazyRegex CoordinateRegex = new LazyRegex(@"^pkg:(?<1>[^/]+)/(?<2>[^@]+)@(?<3>.+)$", RegexOptions.Compiled | RegexOptions.ExplicitCapture);
        private const int MaxCoordinateRequestCount = 128;

        [Persistent]
        [DisplayName("Email address")]
        [PlaceholderText("anonymous")]
        public string UserName { get; set; }
        [DisplayName("API key")]
        [Persistent(Encrypted = true)]
        public SecureString ApiKey { get; set; }

        public override async Task<IEnumerable<VulnerabilityInfo>> GetVulnerabilitiesAsync(IVulnerabilitySourceContext context)
        {
            if (context == null)
                throw new ArgumentNullException(nameof(context));

            using (var client = this.GetHttpClient())
            {
                var serializer = new JsonSerializer();

                var receivedVulnerabilities = new Dictionary<string, OSSVulnerability>();

                foreach (var chunk in GetCoordinateChunks(context.Packages))
                {
                    int retries = 0;
                    Retry:

                    using (var content = getChunkContent(chunk))
                    using (var response = await client.PostAsync("https://ossindex.sonatype.org/api/v3/component-report", content))
                    {
                        if ((int)response.StatusCode == 429 && retries < 5)
                        {
                            this.LogDebug($"Detected rate limiting. Waiting five minutes before retrying. Attempt {(retries + 1)} of 5.");
                            await Task.Delay(TimeSpan.FromMinutes(5));
                            retries++;
                            goto Retry;
                        }

                        if (!response.IsSuccessStatusCode)
                        {
                            this.LogError("OSS Index returned failure error code: " + (int)response.StatusCode);
                            this.LogDebug("Content of response: " + await response.Content.ReadAsStringAsync());
                            return null;
                        }

                        using (var responseStream = await response.Content.ReadAsStreamAsync())
                        using (var textReader = new StreamReader(responseStream, InedoLib.UTF8Encoding))
                        using (var jsonTextReader = new JsonTextReader(textReader))
                        {
                            foreach (var pv in serializer.Deserialize<IEnumerable<PackageVulnerabilities>>(jsonTextReader))
                            {
                                var match = CoordinateRegex.Match(pv.Coordinates);
                                if (!match.Success)
                                    continue;

                                var feedType = ParseFeedType(match.Groups[1].Value);
                                if (feedType == null)
                                    continue;

                                var packageName = match.Groups[2].Value;
                                var packageVersion = match.Groups[3].Value;

                                foreach (var v in pv.Vulnerabilities)
                                {
                                    if (!receivedVulnerabilities.TryGetValue(v.Id, out var vulnerability))
                                    {
                                        vulnerability = new OSSVulnerability(v.Id, v.Title, v.Description, v.CVSSScore, v.Reference);
                                        receivedVulnerabilities.Add(v.Id, vulnerability);
                                    }

                                    vulnerability.AddPackageVersion(feedType.Value, packageName, packageVersion);
                                }
                            }
                        }
                    }
                }

                return receivedVulnerabilities
                    .Values
                    .SelectMany(v => v.GetVulnerabilityInfos());
            }

            HttpContent getChunkContent(string[] chunk)
            {
                var stream = new MemoryStream();
                using (var textWriter = new StreamWriter(stream, InedoLib.UTF8Encoding, 16, true))
                using (var jsonWriter = new JsonTextWriter(textWriter))
                {
                    jsonWriter.WriteStartObject();
                    jsonWriter.WritePropertyName("coordinates");
                    jsonWriter.WriteStartArray();
                    foreach (var c in chunk)
                        jsonWriter.WriteValue(c);
                    jsonWriter.WriteEndArray();
                    jsonWriter.WriteEndObject();
                }

                stream.Position = 0;
                return new StreamContent(stream)
                {
                    Headers =
                    {
                        ContentType = new MediaTypeHeaderValue("application/vnd.ossindex.component-report-request.v1+json")
                    }
                };
            }

        }

        private static IEnumerable<string[]> GetCoordinateChunks(IEnumerable<IVulnerabilityPackage> packages)
        {
            var list = new List<string>(MaxCoordinateRequestCount);

            int n = 0;
            foreach (var c in getCoordinates())
            {
                list.Add(c);
                n++;

                if (n >= MaxCoordinateRequestCount)
                {
                    yield return list.ToArray();
                    n = 0;
                    list.Clear();
                }
            }

            if (list.Count > 0)
                yield return list.ToArray();

            IEnumerable<string> getCoordinates()
            {
                foreach (var p in packages)
                {
                    string typeName;
                    switch (p.FeedType)
                    {
                        case FeedType.NuGet:
                        case FeedType.PowerShell:
                        case FeedType.Deployment:
                            typeName = "nuget";
                            break;
                        case FeedType.Chocolatey:
                            typeName = "chocolatey";
                            break;
                        case FeedType.Npm:
                            typeName = "npm";
                            break;
                        case FeedType.Bower:
                            typeName = "bower";
                            break;
                        case FeedType.Maven:
                            typeName = "maven";
                            break;
                        case FeedType.RubyGems:
                            typeName = "gem";
                            break;
                        case FeedType.Python:
                            typeName = "pypi";
                            break;
                        default:
                            typeName = null;
                            break;
                    }

                    var fullName = p.Name;
                    if (!string.IsNullOrEmpty(p.Group))
                        fullName = p.Group + "/" + fullName;

                    if (typeName != null)
                    {
                        foreach (var v in p.Versions)
                            yield return $"pkg:{typeName}/{fullName}@{v}";
                    }
                }
            }
        }

        private static FeedType? ParseFeedType(string f)
        {
            switch (f.ToLowerInvariant())
            {
                case "nuget":
                    return FeedType.NuGet;
                case "chocolatey":
                    return FeedType.Chocolatey;
                case "npm":
                    return FeedType.Npm;
                case "bower":
                    return FeedType.Bower;
                case "maven":
                    return FeedType.Maven;
                case "gem":
                    return FeedType.RubyGems;
                case "pypi":
                    return FeedType.Python;
                default:
                    return null;
            }
        }

        private HttpClient GetHttpClient()
        {
            HttpClient client;

            if (!string.IsNullOrWhiteSpace(this.UserName) && this.ApiKey != null)
                client = new HttpClient(new HttpClientHandler { Credentials = new NetworkCredential(this.UserName, this.ApiKey) });
            else
                client = new HttpClient();

            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.ossindex.component-report.v1+json"));
            return client;
        }
    }
}
