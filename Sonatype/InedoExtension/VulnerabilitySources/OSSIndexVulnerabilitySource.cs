using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Http;
using System.Security;
using System.Threading.Tasks;
using Inedo.Extensibility.VulnerabilitySources;
using Inedo.Serialization;
using System.Net.Http.Headers;
using Inedo.Diagnostics;

namespace Inedo.Extensions.Sonatype.VulnerabilitySources
{
    [DisplayName("OSS Index")]
    [Description("Automatically imports vulnerability information from OSS Index, previously known as Vör Security.")]
    [PersistFrom("Inedo.ProGet.Extensions.VorSecurity.VulnerabilitySources.VorSecurityVulnerabilitySource,VorSecurity")]
    public sealed class OSSIndexVulnerabilitySource : VulnerabilitySource
    {
        [Persistent]
        [DisplayName("Email address")]
        public string UserName { get; set; }
        [DisplayName("API key")]
        [Persistent(Encrypted = true)]
        public SecureString ApiKey { get; set; }

        public override async Task<IEnumerable<VulnerabilityInfo>> GetVulnerabilitiesAsync(IVulnerabilitySourceContext context)
        {
            if (context == null)
                throw new ArgumentNullException(nameof(context));

            var packages = context.Packages.Select(PackageCoordinate.TryCreate).Where(p => p != null).ToArray();

            var info = Enumerable.Empty<VulnerabilityInfo>();

            using (var client = new HttpClient()
            {
                DefaultRequestHeaders =
                {
                    Accept = { new MediaTypeWithQualityHeaderValue("application/vnd.ossindex.component-report.v1+json") }
                }
            })
            {
                var coordinates = packages.Select(p => p.ToString()).ToArray();
                for (int i = 0; i < coordinates.Length; i += 128)
                {
                    for (int retries = 0; ; retries++)
                    {
                        using (var content = new StringContent(JsonConvert.SerializeObject(new { coordinates = new ArraySegment<string>(coordinates, i, Math.Min(128, coordinates.Length - i)) }), InedoLib.UTF8Encoding, "application/vnd.ossindex.component-report-request.v1+json"))
                        using (var response = await client.PostAsync("https://ossindex.sonatype.org/api/v3/component-report", content))
                        {
                            if ((int)response.StatusCode == 429 && retries < 5)
                            {
                                this.LogDebug($"Detected rate limiting. Waiting a minute before retrying. Attempt {(retries + 1)} of 5.");
                                await Task.Delay(TimeSpan.FromMinutes(1));
                                continue;
                            }

                            if (!response.IsSuccessStatusCode)
                            {
                                this.LogError("OSS Index returned failure error code: " + (int)response.StatusCode);
                                this.LogDebug("Contents of response:\n" + await response.Content.ReadAsStringAsync());
                                return null;
                            }

                            info = info.Concat(JsonConvert.DeserializeObject<IEnumerable<PackageVulnerabilities>>(await response.Content.ReadAsStringAsync())
                                .SelectMany(p => p.Vulnerabilities.Select(v => v.GetInfo(p, packages))));

                            break;
                        }
                    }
                }
            }

            return info;
        }
    }
}
