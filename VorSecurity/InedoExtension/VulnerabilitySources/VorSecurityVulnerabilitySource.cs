using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net.Http;
using System.Security;
using System.Threading.Tasks;
using Inedo.Documentation;
using Inedo.Extensibility.VulnerabilitySources;
using Inedo.Serialization;

namespace Inedo.ProGet.Extensions.VorSecurity.VulnerabilitySources
{
    [DisplayName("Vör Security")]
    [Description("Automatically imports vulnerability information from Vör Security.")]
    public sealed partial class VorSecurityVulnerabilitySource : VulnerabilitySource
    {
        [Required]
        [Persistent]
        [DisplayName("Email address")]
        public string UserName { get; set; }
        [Required]
        [DisplayName("API key")]
        [Persistent(Encrypted = true)]
        public SecureString ApiKey { get; set; }

        public override async Task<IEnumerable<VulnerabilityInfo>> GetVulnerabilitiesAsync(IVulnerabilitySourceContext context)
        {
            if (context == null)
                throw new ArgumentNullException(nameof(context));

            var packages = context.Packages.Select(PackageId.TryCreate).Where(p => p != null).ToArray();

            using (var client = new HttpClient())
            using (var content = new StringContent(JsonConvert.SerializeObject(packages), InedoLib.UTF8Encoding, "application/json"))
            using (var response = await client.PostAsync("https://ossindex.net/v2.0/package", content))
            {
                response.EnsureSuccessStatusCode();

                return JsonConvert.DeserializeObject<IEnumerable<PackageVulnerabilities>>(await response.Content.ReadAsStringAsync())
                    .SelectMany(p => p.Vulnerabilities.Select(v => v.GetInfo(p, packages)));
            }
        }
    }
}
